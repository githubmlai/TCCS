from rsf.proj import *
from math import *

##############################################
#
# !!!! CHANGE ME 

h = 0.5

#
##############################################

alpha = pi/6
a = tan(alpha)

# Make a reflector model 
Flow('refl',None,
     '''
     math n1=901 o1=0 d1=0.01 output="sqrt(%g^2+(x1*%g)^2)" 
     ''' % (h,a))

# Reflector dip
Flow('dip','refl','math output="%g*x1/input" ' % (a*a))

# Kirchoff modeling
Flow('data','refl dip',
     '''
     kirmod nt=1501 ns=5 s0=1 ds=0.5 nh=401 dh=0.01 h0=-0.5
     twod=y vel=1 freq=5 dip=${SOURCES[1]} verb=y
     ''')

# Reflection traveltime

##############################################
#
# !!!! CHANGE ME 

y = '((%g)^2*((x1+x2)*x2*(%g)^2-(%g)^2)+' \
    '(%g)^2*sqrt((%g)^4+(%g)^2*(%g)^2*((x1+x2)+x2)+' \
    '(x1+x2)^2*x2^2*(%g)^4))/((%g)^2*((x1+x2)+x2))' \
    % (cos(alpha),sin(alpha),h,cos(alpha),h,h, \
    sin(alpha),sin(alpha),sin(alpha))


eq = 'sqrt(((x1+x2)-%s)^2+(%g)^2+(%s)^2*(%g)^2)+'\
     'sqrt((x2-%s)^2+(%g)^2+(%s)^2*(%g)^2)' \
      % (y,h,y,tan(alpha),y,h,y,tan(alpha))

#
##############################################

Flow('time','data',
     '''
     window n1=1 | 
     math output="%s" 
     ''' % eq)

shots = []
for s in (0,2,4):
    shot = 'shot%s' % s
    Flow(shot,'data','window n3=1 f3=%d' % s)
    Plot(shot,
         '''
         grey title="Shot at %d km" 
         label1=Time unit1=s label2=Offset unit2=km
         labelsz=10 titlesz=15
         ''' % (1+0.5*s))

    time = 'time%s' % s
    Flow(time,'time','window n2=1 f2=%d' % s)
    Plot(time,
         '''
         graph plotcol=3 wanttitle=n wantaxis=n 
         min2=0 max2=6 pad=n yreverse=y
         ''')

    Plot(shot+'o',[shot,time],'Overlay')
    shots.append(shot+'o')
Result('shots',shots,'SideBySideAniso')

# Velocity for imaging

#vel = 1
for vel in range(3):
    water='water%d' %vel
    Flow(water,None,
         '''
         spike mag=%g 
	 n1=201 d1=0.01 n2=301 d2=0.01
         ''' % (0.9,1,1.1)[vel])
    
# Kirchhoff migration
    image='image%d' %vel
    Flow(image,'data',
         '''shotconstkirch nx=301 dx=0.01 x0=0 vel=%g
         ''' % (0.9,1,1.1)[vel])

    sources = []
    sources.append(image)
    sources.append(water)

# Stack images from different shot gathers
    stack='stack%d' %vel
    Flow(stack,sources,
         '''
         halfint inv=y adj=y |
         stack axis=3 |
         time2depth velocity=${SOURCES[1]}
         ''')

    image='image%d' %vel
    
    Result(image,stack,
           '''
           grey pclip=100
           title="Image at Velocity %g km/s" 
           label2=Distance unit1=km
           label1=Depth unit1=km
           ''' % (0.9,1,1.1)[vel])

End()
